[["index.html", "Contributing to R Core", " Contributing to R Core R Contribution Working Group 2021-06-01 "],["r-core-developers-guide.html", "Chapter 1 R Core Developer’s Guide 1.1 How to contribute?", " Chapter 1 R Core Developer’s Guide This guide is heavily influenced by the Python Developer Guide, and is a comprehensive resource for contributing to R Core – for both new and experienced contributors. It is maintained by the R Contribution Working Group. We welcome your contributions to R Core! 1.1 How to contribute? This guide is built using bookdown which makes editing it easier, provided you have a GitHub account (sign-up at github.com). After you log-in to GitHub, click on the ‘Edit’ icon highlighted with a red ellipse in the image below. This will take you to an editable version of the the source R Markdown file that generated the page you are on: Use the issue tracker to raise an issue about the guide’s content or to make a feature request. Maintainers and contributors are requested to follow this project’s code of conduct. "],["getting-started.html", "Chapter 2 Getting Started 2.1 General instructions 2.2 Installing R 2.3 Building R and R packages 2.4 See also", " Chapter 2 Getting Started These instructions cover how to install R in Windows. The tools required to build R and R packages in Windows are also discussed. 2.1 General instructions If you install the latest version or R-patched or R-devel, it will not over-write the previous installation(s) in your Windows machine. R uses a ‘major.minor.patchlevel’ version numbering scheme. Accordingly there are three main releases of R available to install: The official release (r-release), The patched release (r-patched), and The development (r-devel) release. The r-devel is the next minor or eventually major release development version of R. Mostly, bug fixes are introduced in r-patched, while r-devel is for introducing new features. 2.2 Installing R The binary builds of R for Windows can be downloaded and installed from here. Along with the link to the latest stable release, this page also contains links to the binary builds of r-patched and r-devel. Click on the download links to download an executable installer. Select the language while installing, read the public license information, and select the destination location to start the installation. You will be prompted to select components at this stage: User installation, 32-bit User installation, 64-bit User installation, or Custom installation. The default option may be opted for the questions from this step onwards to complete the installation. 2.3 Building R and R packages 2.3.1 What tools do you need to build R from source on Windows? RTools is the toolchain bundle that you can use to build R base and R packages containing compiled code, on Windows. You also need a distribution of \\(\\LaTeX\\) installed for building R and checking packages. The MiKTeX distribution of LaTeX that is used on CRAN can be downloaded from https://miktex.org. 2.3.2 How to setup RTools? The latest version of RTools can be downloaded from https://cran.r-project.org/bin/windows/Rtools/ and run in the Windows-style installer. You will need to know if you have a 32-bit or 64-bit Windows machine (right-click This PC in Windows Explorer and check the properties if you are unsure). Don’t forget to add RTools to the path as documented on the download page. 2.3.3 How to build R? To build R for Windows using RTools follow the instructions in this README file. There are two options available to build R. One is the quick development build and the other option is the full installer build. For development and testing, you need only the quick development build. The quick build avoids building the manuals, which are generally not needed for development and testing. However, even for the quick build there are some default requirements. For instance, MiKTeX is to be installed in C:/Program Files and you have 64-bit R. If necessary, these defaults can be customised. The installation path of MiKTeX can be customised here whereas the Windows bit can be customised here. If you are a maintainer of the Windows CRAN releases then, the full installer build is available for building the complete installer as it appears on CRAN. It will build both the 32-bit and 64-bit R, the pdf manuals, and the installer program. You will use this to create the binary builds and not when building R from the source yourself. 2.4 See also CRAN official website R installation and administration manual R for Windows FAQ Rtools40 manual for Windows R FAQ "],["bug-tracking.html", "Chapter 3 Bug Tracking 3.1 What is a bug in R? 3.2 What condition might not be a bug? 3.3 Checking if a bug is already reported 3.4 Levels of contributing to bug / What do you do when you find a bug? 3.5 What are some places where you may find a bug? 3.6 How to report a bug? 3.7 Good practices in reporting bugs / Expectations of a good bug report 3.8 Disagreement with a resolution on the bug tracker 3.9 Examples of Bug reports submitted on Bugzilla or R-devel mailing list 3.10 See also", " Chapter 3 Bug Tracking 3.1 What is a bug in R? You may find a bug in R if: The R session terminates unexpectedly, or there is a segmentation fault, it might be a bug in R, unless you have written your own call to compiled code or an internal function (via .C or .Internal). The error may look like this: ## *** caught segfault *** ## address (nil), cause &#39;memory not mapped&#39; If the code does not do what the documentation says it should, then either the code or the documentation is wrong. Report either of which needs to be fixed. Note: When you are in doubt that there is a bug: (which should be most of the time!) Make sure whether the bug appears in a clean session of R. Many times, there are variables/commands/functions stored in history which might cause issues. Hence, check if the issue happens in a clean session. To do so, launch R from the command line with the --vanilla option. At times the code that is written is very complicated, has numerous package and file dependencies, has many function calls, etc.. In such scenarios it is quite common that the code throws an error and you are not able to solve it. You may tend to think that there is a bug that needs to be reported. Before doing so, try to produce a minimum working example of the code for the section where the error occurred. Add only those package and files which are required by that section, and see if the error appears still. Using this approach shall solve most of the errors. Install R-devel, which is the most recent version of R from svn / git or daily Windows build, and see if your bug still exists in R-devel (it may have been fixed very recently). Search on R-devel email list for messages with keywords related to your possible bug. If you find some related messages then read them to see if they clarify whether or not it is a bug. If you do not find any related messages, then please post a new message to R-devel. Your message should include (1) a brief description of the bug including current and expected behavior, (2) a minimal reproducible example. 3.2 What condition might not be a bug? In case the code is doing something unexpected, it may not necessarily be a bug. Carefully review the documentation of the function being called, and check whether the behaviour being exhibited on calling this function is the same as it was designed to do. Issues with seemingly identical numbers not being equal (especially floating point numbers) are usually not bugs. If R is running slower than expected, then also it may not be a bug. Ask someone else to review your code in such a case. If some function is working, but it is not defined in the best generalised way, then consult someone to look over your code. This may perhaps not be a bug; instead, it might be an alternative way of writing the function. 3.3 Checking if a bug is already reported The first step before filing a bug report is to see whether the problem has already been reported. Checking if the bug is reported will: Save time for you and the developers Help you see if the bug is already fixed for the next release Lead you to learn what needs to be done to fix it Determine if any additional information is needed The sections that follow discuss where to check whether a bug is already reported. 3.4 Levels of contributing to bug / What do you do when you find a bug? Report the bug (if it is not already reported). Test the bug. Fix the bug: Fixing a bug might require relatively more time. You may start a conversation about it on BugZilla. This would require engagement with R Core team. 3.5 What are some places where you may find a bug? You may find a bug in: In the R-Core supported packages, their documentations, and/ or in the R language. In packages and/or their documentations which are not supported by the R-Core. 3.6 How to report a bug? Once you confirm a bug exists, you need to submit a bug report so that it gets fixed. 3.6.1 Bug in the R-Core supported packages, their documentations, and/ or in the R language Packages that are supported by the R-Core are labelled with Maintainer: R Core Team &lt;R-core@r-project.org&gt;. One simple way to get the information from R is by running the maintainer(\"package_name\") command. The bug report for R-Core supported packages, their documentations, and/ or a bug report for the R language itself can be submitted either to R’s Bugzilla. In the future, we hope to have an option to report an issue to the GitHub Mirror of R svn server. If you want to submit the bug report using Bugzilla, please ensure that you have a Bugzilla account. To get a Bugzilla account, please send an e-mail to bug-report-request@r-project.org from the address that you want to use as your login. In this e-mail, briefly explain why you need an account. A volunteer shall then create a Bugzilla account and add you to R’s Bugzilla members. Please ensure whether the bug is already fixed (in the upcoming changes in R) or reported (search for it from those already reported on Bugzilla, either on search existing bug reports, may use the advanced search option here, or show open bugs new-to-old). 3.6.2 Bug in the non R-Core supported packages and/or their documentations For packages that are not maintained by the R-Core, the bug reports can be submiited at, perhaps, an issues tracker url on GitHub/GitLab/R-Forge. To find if such an issues tracker is available, you can look at the package DESCRIPTION file first (e.g. using packageDescription(\"package_name\")) to check if a url is provided in the BugReports field. If that is not available, then the package maintainer can be contacted (using maintainer(\"package_name\")). In R running the function bug.report(package = \"package_name\") shall direct you to either the GitHub issue tracker of the package, or to the bug tracking web page, or towards composing an e-mail to the package maintainer. This function bug.report is disabled in RStudio, by default. However, if you use utils::bug.report(package = \"package_name\") then it works on RStudio as well. Please ensure that the bug is not already reported or fixed before reporting it in any of the ways suggested above. 3.7 Good practices in reporting bugs / Expectations of a good bug report If you follow the practices given below, you will come up with a good bug report which might make it easier for the maintainer(s) to fix the bug. Include a minimal reproducible example of the bug in your report. The maintainer should be able to quickly reproduce the bug on using the minimal example that you provide. Here is a community wiki post on how to make a minimal reproducible example. Mention the software architecture on which the bug occurred. Use inbuilt data sets as far as possible. In addition to the above, here are the bug writing guidelines on Bugzilla. The bug reporting documentation in R also the discusses practices to write a good bug report. Once you have successfully reported a bug, you will likely receive an update each time an action is taken on the bug. On Bugzilla, the report may be given one of the following status: New, Assigned, Confirmed, Reopened, Unconfirmed. 3.8 Disagreement with a resolution on the bug tracker As humans, there might be differences of opinions from time to time. What needs to be considered here is that, being respectful of the fact that care, thought, and volunteer time has gone into the resolution of the issue or bug. If you take some time, then on reflection, the resolution steps may seem more reasonable than you initially thought. If you still feel that the resolution is incorrect, then raise a thoughtful question to the person who resolved it. If the issue was carefully thought about in the first place then is less likely to win any conversion of thought. As a reminder, issues closed by a core developer on Bugzilla have already been carefully considered. Please do not reopen a closed issue. Although one can comment on a closed issue, if necessary. Every comment on an issue generates an email to every R-core member (unless they have the notifications disabled). So it would be best to be considerate while commenting on issues, especially in case of the closed issues or when you are commenting in pure agreement without adding anything beyond that to a discussion (the +1 type posts which are perfectly acceptable in other contexts). 3.9 Examples of Bug reports submitted on Bugzilla or R-devel mailing list If you like to see how bugs are reported on Bugzilla, here are some examples: A bug report with a reproducible example, a patch, and a review. A bug report submitted by Kara Woo which was promptly fixed via the R-devel mailing list. (More information about the R-devel mailing list can be found here). A substring bug reported by Toby Dylan Hocking and fixed by Tomas Kalibera, Feb 2019 via the R-devel mailing list. A gregexpr bug report and patch submitted by Toby Dylan Hocking and merged by Tomas Kalibera, Feb 2019 via the R-devel mailing list. 3.10 See also Reporting a bug R FAQ on bugs Bugzilla guidelines of reporting a bug "],["reviewing-bugs.html", "Chapter 4 Reviewing Bugs 4.1 How you can help to review bug reports? 4.2 Classifying bug reports 4.3 How to find a bug report or an issue to review? 4.4 Example of a bug review submitted on Bugzilla 4.5 See also", " Chapter 4 Reviewing Bugs 4.1 How you can help to review bug reports? After understanding where bugs are reported in R (Bugzilla) or in other projects (GitHub/GitLab/R-Forge), a great way to contribute is reviewing bug reports. Around the clock, new bug reports are being submitted on Bugzilla or the bug trackers (for instance, GitHub issues) of R packages and existing bug reports are being updated. Every bug report needs to be reviewed to make sure various things are in proper order. You can help with this process of reviewing bugs. 4.1.1 Preparing to review bug reports If you want to review bug reports on Bugzilla, you are required to have a Bugzilla account. To get a Bugzilla account send an e-mail to bug-report-request@r-project.org from the address you want to use as your Bugzilla login. Briefly explain why you want a Bugzilla account and a volunteer will add you to R’s Bugzilla members. More details on how you can review a bug report are available on this blog 4.2 Classifying bug reports A good bug report is the one which: Explains clearly how to reproduce the bug. Includes the version of R, the machine architecture, and the operating system platform on which the bug occurred. Relevant details should be a part of a good bug report. You can help with the following tasks once you have some R programming experience: Reproducing the bug: If you see a bug report which does not clearly explain how to reproduce it, you can try reproducing the bug and eventually make things easier for the core developer(s) and/or package maintainer(s). Checking different binary builds: Check whether the bug occurs on a different binary build of R. It is helpful to know whether the bug is affecting: r-patched, r-devel, or r-release binary builds of R. Writing a unit test: If the bug report lacks a unit test that should be a part of R’s test suite, then you can help with providing it. These helpful tasks allow the Core developers and/ or maintainers to classify a bug report properly, so that the bug can be handled in a timely fashion. 4.3 How to find a bug report or an issue to review? You may search old bug reports or issues that could be closed. Old bug reports may no longer be valid or may include a patch that is ready to be committed, but no one has had the time to review and commit. You might also want to search for issues in topics in which you have a working knowledge. When on Bugzilla you can use the advanced search to find specific topics. Bug reports are by default public on Bugzilla (unless the defaults are changed to avoid security vulnerability). 4.4 Example of a bug review submitted on Bugzilla If you would like to see how bugs are reviewed on Bugzilla, here is an example where an old bug report is being reviewed. It is tested to see if it was still an issue and a few ways are proposed to resolve the issue. Note: There is a #bugreports-for-review channel on the R-devel slack where you can share your bug report(s) for review/feedback before submitting to Bugzilla. This can help with checking that it really is a bug, that you have included the important information and excluded redundant information. 4.5 See also Reviewing bug reports: Blog "],["FixBug.html", "Chapter 5 Lifecycle of a Patch 5.1 Introduction 5.2 When do you submit a patch? 5.3 What tools are required to submit a patch? 5.4 How to prepare a patch? 5.5 Making good patches 5.6 Submitting your patch for review 5.7 Getting your patch reviewed 5.8 Leaving a patch review on Bugzilla 5.9 Dismissing review from another core developer 5.10 Acceptance or rejection of your patch 5.11 Examples of patch reports on Bugzilla 5.12 Examples of reviewing a patch 5.13 See also", " Chapter 5 Lifecycle of a Patch 5.1 Introduction R uses a workflow based on patches. A patch is the set of differences (additions and deletions) between two versions of code. So you can create a patch defining a bug fix or a proposed update to the R codebase and submit it through your official Bugzilla account to the core developer(s). Be clear in your communication as it is the key to contributing to any project, especially an open source project like R. 5.2 When do you submit a patch? There might be a situation where you come across a bug in R, which you may have an idea of how to fix. This can turn out to be an opportunity for you to submit a patch. By submitting a patch or a bug fix, you are helping to reduce the workload on the R developers in addition to yourself being a contributor to R! When you submit a patch, you are helping the developer(s) and maintainer(s) so that they do not have to write the entire code from scratch. Instead, they can test and tweak your patch, if necessary. 5.3 What tools are required to submit a patch? To submit a patch, you need: SVN installed on your machine. The latest developer version of R. 5.4 How to prepare a patch? Refer to the guidelines given here for the process to prepare a patch against R-devel. 5.5 Making good patches When creating a patch for submission, there are several things that you can do to help ensure that your patch is accepted: Make sure to follow R’s coding standards (R is a GNU project and there are GNU coding standards). The coding style of the patch you submit should largely match with the codebase it is being applied to. If your patch has one or two minor discrepancies, then those may be fixed by the core developer who will eventually test your patch. However, if there are systematic deviations from the style guides your patch will be put on hold until you fix the formatting issues. There is no comprehensive official R style manual, however some nearly universal standards are summarised in this article. Be aware of backwards-compatibility considerations. While the core developer who eventually handles your patch will make the final call on whether something is acceptable, thinking about backwards-compatibility early will help prevent having your patch rejected on these grounds. Put yourself in the shoes of someone whose code will be broken by the change(s) introduced by the patch. It is quite likely that any change made will break someone’s code, so you need to have a good reason to make a change as you will be forcing someone to update their code. This obviously does not apply to new functions or new arguments. New arguments should be optional and have default values which maintain the existing behaviour. If in doubt, discuss the issue with experienced developers. Make sure you have proper tests to verify that your patch works as expected. Patches may not be accepted without the proper tests. Make sure the entire test suite runs without failure because of your changes. It is not sufficient to only run whichever test seems impacted by your changes, because there might be interactions unknown to you between your changes and some other part of the interpreter. Proper documentation additions/changes should be included. Each bugfix should ideally be addressed by a single patch. In particular, do not fix more than one issue in the same patch (except, if one code change fixes all of them) and do not do cosmetic changes to unrelated code in the same patch as some bugfix. 5.6 Submitting your patch for review Patch in response to a pre-existing issue or bug report: In this case, you should attach the patch to the existing issue or bug report on Bugzilla with a brief comment. Patch in response to an unreported issue or bug report: Assuming you already performed a search on Bugzilla for a pre-existing issue or bug and did not find the issue or bug reported, you need to create a new bug report and include your patch with it. Please fill in as much relevant detail as possible to prevent reviewers from having to delay reviewing your patch because of lack of information. Include (mostly as the first sentence), a to-the-point explanation of what the purpose of the patch is. This sentence should not be in the descriptive form, rather an imperative form will be more suitable here. If this is not enough detail for a patch, a new paragraphs(s) can be added to explain in proper depth what has happened. The details should be good enough that a core developer reading it understands the justification for the change. 5.7 Getting your patch reviewed To begin with, please be patient. There are many more people submitting patches than there are people capable of reviewing your patches. Getting your patch reviewed requires a reviewer to have the spare time and motivation to look at your patch. We cannot force anyone to review patches and no one is employed to look at patches. There is a #patches-for-review channel on the R-devel slack where you can share your patch(es) for review/feedback before submitting to R-Core/Bugzilla. This can help with checking that you have included the important information and excluded redundant information. If your patch has not received any notice from reviewers (i.e., no comment made) after one month, comment/message on the #patches-for-review channel to remind the members that the patch needs a review. When someone does manage to find the time to look at your patch they will most likely make comments about how it can be improved. It is then expected that you update your patch to address these comments, and the review process will thus iterate until a satisfactory solution has emerged. 5.7.1 How to review a patch? One of the bottlenecks in the R development process is the lack of code reviews. If you browse Bugzilla, you will see that numerous issues have a fix, but cannot be merged into the main source code repository, because no one has reviewed the proposed solution. Reviewing a patch can be just as informative as providing a patch and it will allow you to give constructive comments on another developer’s work. This guide provides a checklist for submitting a patch review. It is a common misconception that in order to be useful, a patch review has to be perfect. This is not the case at all. It is helpful to just test the patch and/or play around with the code and leave comments in the patch or on Bugzilla. If a bug report or an issue has a patch attached that has not been reviewed, you can help by making sure that the patch: follows the style guides; is a good solution to the problem it is trying to solve; includes proper tests; and includes proper documentation changes. Also refer to Making good patches for more ideas. Doing all of this allows the core developer(s) and/ or maintainer(s) to more quickly look for subtle issues that only people with extensive experience working on R’s codebase will notice. 5.8 Leaving a patch review on Bugzilla When you review a patch, you should provide additional details and context of your review process and leave comments. For example: If you tested the patch, report the result and the system and version tested on, such as ‘Windows 10’, ‘Ubuntu 16.4’, or ‘Mac High Sierra’. If you request changes, try to suggest how or attach an updated patch. Comment on what is ‘good’ about the patch, not just the ‘bad’. Doing so will make it easier for the patch author to find the good in your comments. 5.9 Dismissing review from another core developer A core developer can dismiss another core developer’s review if they confirmed that the requested changes have been made. When a core developer has assigned the patch to themselves, then it is a sign that they are actively looking after the patch, and their review should not be dismissed. 5.10 Acceptance or rejection of your patch Once your patch has reached an acceptable state, it will either be applied or rejected. If it is rejected, please do not take it personally. Your work is still appreciated regardless of whether your patch is applied. Balancing what does and does not go into R is tricky and everyone’s contributions cannot always be accepted. But if your patch is accepted and applied it will then go on to be released with the next patched release and eventually the next major release of R. It may also be backported to older versions of R as a bugfix if the core developer doing the patch acceptance believes it is warranted. It may take longer before your patch is accepted and applied or rejected, sometimes even months or years. Nonetheless, it is appreciated that you submitted a patch. 5.11 Examples of patch reports on Bugzilla 5.12 Examples of reviewing a patch 5.13 See also Submitting patches "],["r-core-developers.html", "Chapter 6 R Core Developers", " Chapter 6 R Core Developers This page lists the former and current members of the R Core team who have write access to the R source. Brian Ripley (present) Deepayan Sarkar (present) Douglas Bates (present) Duncan Murdoch (up to September 2017) Duncan Temple Lang (present) Friedrich Leisch (present) Guido Masarotto (up to June 2003) Heiner Schwarte (up to October 1999) John Chambers (present) Kurt Hornik (present) Luke Tierney (present) Martin Maechler (present) Martin Morgan (present) Martyn Plummer (present) Michael Lawrence (present) Paul Murrell (present) Peter Dalgaard (present) Robert Gentleman (present) Ross Ihaka (present) Seth Falcon (up to August 2015) Simon Urbanek (present) Stefano lacus (up to July 2014) Thomas Lumley (present) Tomas Kalibera (present) Uwe Ligges (present) View the affiliations of R Core members. We’ve left it up to the individual core developers to list areas of expertise (or things they are willing to maintain) if they wish. The Contributors page on the R Project website also lists contributors, outside the R Core team, who provided invaluable help by donating code, bug fixes, and documentation. "],["WhereToGetHelp.html", "Chapter 7 Where to get help 7.1 Slack 7.2 Mailing Lists 7.3 File a Bug", " Chapter 7 Where to get help If you are working on R it is possible that you will come across an issue where you would need some assistance to solve it. If you require help, there are options available to seek assistance or get some feedback which are discussed in this chapter. If the question involves process or tool usage then please check the rest of this guide first as it should answer your question. Please make sure to search the documentation and resources to see if your question has already been addressed. If not, then ask for assistance in the appropriate forum. Many developers are volunteers and please be polite, patient, and thoughtful when requesting for feedback or help. 7.1 Slack You can discuss issues related to the development of R and learn about the process of contributing to R on the R-devel slack. There are a number of experienced developers on this slack who can answer questions and/or provide feedback. The following channels are available on the R-devel slack for help and feedback with specific areas: #bugreports-for-review: Share bug reports for review/feedback before submitting to Bugzilla. #core-dev-help: Getting help on anything related to R Core contribution. #core-documentation: Discuss patches/improvements to R’s documentation. #core-translation: Discuss translating R messages, warnings, and errors into non-English languages. #patches-for-review: Share patches for peer review before submitting to R Core. Note: You may not be able to access the history of these channels, so it cannot be used as a knowledge base of sorts. 7.2 Mailing Lists There are quite a few mailing lists for getting help with R: R-devel: Questions and discussion about development of R vs. with R. Getting help with technical programming issues, e.g. interfacing R with C/C++. Proposals of new functionality for R. Pre-testing of new versions of R. Enhancements and patches to the R source code and the R documentation. Posting examples and benchmarks. R-help: Discussions about problems and solutions using R. R-package-devel: Getting help about package development in R. Learning about the package development process. Discussing problems developing a package (or problem in passing the R CMD check). Please avoid cross-posting to both the R-package-devel and the R-devel mailing lists. 7.3 File a Bug If you strongly suspect you have come across a bug (be it in the build process, or in other areas), then report it on Bugzilla. "]]
